12/02/17(金) 01:59:08 Perl勉強会#2 K.Tsunezumi

0.はじめに
  0-1.参考書
  ・『プログラミングPerl 改訂版 2nd Edition Perl5対応』※定価\4900+税
    通称『ラクダ本』
  　ただし上記のは絶版になっております。現行のは以下の2分冊になっています。

　・『プログラミングPerl〈VOLUME1〉 』※定価\5565（高い...）
  ・『プログラミングPerl〈VOLUME2〉 』※定価\4935（高い...）

  Perlの参考書としては上記の2冊が最も有名でしょう。
  発展的内容も含まれるのでとっつきにくいと感じている方には以下の書籍がよいでしょう。
  しかし分冊化されてお値段倍ですか...。

  ・『初めてのPerl 第5版』※定価\3780
  ・『続・初めてのPerl 第5版』※定価\3780
    通称『リャマ本』。
  『初めてのPerl』で基本的なPerlスクリプトの書き方を学び『続・初めてのPerl』で中規模以上のスクリプトを書くのに効率の良いやり方を学ぶ流れになっています。

  何をやったらいいかわからない人は"コマンドラインで動作する"スクリプトを動かしながらステップバイステップで学ぶ形式の本などで、コピペでもいいのでプログラムを入力して動かしてみるのが一番だと思います。
  個人的な見解としては、いきなりWebサーバで動作するスクリプトを作成しようとするとサーバの設定やエラーが出て何も表示されない時の対処で挫折することが多いです。最初はコマンドラインベースをお勧めします。
  千里の道も「Hello World」から。

  0-2.自学用Webサイト
    本は買(いたくない|えない)という人はWebサイトでも可（なかなか体系だった知識が身につきにくいのが難点ですが）。
    【TODO：Webベースの入門者向けサイトのおすすめをピックアップ】

  0-3.Perlスクリプトの書き方と実行方法
    例）コマンドライン画面に'Hello World'と表示させるスクリプト
    (1) ファイルを開く
    (2) スクリプトを書く（perlstudy2_000.pl）
      >>
        print "Hello World\n";
      <<
      ※ print：画面に文字列を表示するためのコマンド
      ※ \n："¥"+n：文字列の最後で改行することを指示します
    (3) 適当な名前をつけて保存する（Perlなら.plという拡張子をつけて保存するのが割りと一般的）
      ※ここでは"perlstudy2_000.pl"という名前で保存しています。
    (4) Perlでスクリプトを実行
      >>
        $> perl perlstudy2_000.pl
        Hello World
        $> (文字列の最後に¥nを付け加えているので次のプロンプトがここに出てくるはずです）
      <<
    (5) もっと簡単に実行する方法
      (４）ではスクリプトを実行するのにPerlの実行コマンドに作成したスクリプトファイルを指定する必要がありましたが、ファイルそのものをスクリプトとして実行する方法もあります（ほとんどはこの方法で実行させることが多いです）。
      スクリプトの"一行目"に以下のような文を追加してください（perlstudy2_001.pl）。
      >>
         #!/usr/bin/perl
      <<
      この行でPerlの実行ファイルの場所（パス）を指示します。以下のように調べることができます。
      >>
         $> which perl
         /usr/bin/perl ※ここの行をコピペ
      <<
    (5-1) 実行
      >>
         $> ./perlstudy2_001.pl
         -bash: ./perlstudy2_001.pl: Permission denied
      <<
      bash（使用しているシェルの名前）に"Permission denied（権限拒否）"と怒られてしまいました。
      ファイル（perlstudy2_001.pl）にスクリプトとしてファイルを実行させる為の権限がないからです。
      Linuxなどの多くの環境では、ファイルをスクリプトとして実行させるためにはファイルに実行権限を与えてやる必要があります（ファイル作成時に最初から実行権限を与えている環境もあるが、セキュリティ上の観点からないことの方が多い）。
    (5-2) 実行権限の確認
      >>
        $> ls -l perlstudy2_001.pl
         -rw-r--r-- ...
            ^ ここの部分に'x'があるとファイルの所有者の実行権限があるという意味になる
      <<
      ファイルの所有者（自分）に実行権限が内容なので与えてやります。
    (5-3) スクリプトファイルに実行権限を与える
      >>
        $> chmod u+x perlstudy2_001.pl
      <<
      ※ chmod：ファイルの実行権限を与えるコマンド（ファイル所有者が自分である場合のみ使用可）
      ※ u+x：所有者(u）に実行権限(x)を与える(+)の意味
    (5-4) 実行権限を確認
      >>
      $> ls -l perlstudy2_001.pl
       -rwxr--r-- ...
          ^ ここの部分に'x'があるとファイルの所有者の実行権限があるという意味になる
      <<
      実行権限があることが確認できたのでPerlスクリプトを実行します。  
    (5-5) 再び実行
      >>
         $> ./perlstudy2_001.pl
         Hello World
         $> 
      <<
      成功！

1.Perlでスクリプトを書くときのお約束
  1-1.幸せになれる3つの呪文
    『use strict』
      ・簡単に言うと「好ましくない操作を行おうとするとエラーにしてくれる」呪文
        ・下手にプログラムが動くと期待しない結果になった時に原因がわからなくなる時があります。詰みます。
      ・追加のインストールは不要です。
      ・以下ののオプションがあります。
        『vars』my,our,use varsなど、変数の有効範囲を指定した宣言をせずに変数を使おうとするとエラーを出力する
        『refs』シンボリックリファレンスが使われた時にエラー出力する
        『subs』サブルーチン以外の裸の識別子を使おうとした時にエラーを出力する
      ・最初は『vars』以外は意識して使うことはないと思いますが、とりあえずスクリプト冒頭に「use strict;」と書いておけばOKです。何も指定しないと全てのオプションを指定したのと同じ意味になります。
      【use strictがない場合の例 - varsの例】
        >> [perlstudy2_101.pl] 
        #!/usr/bin/perl
  
        $greeting = "Hello World\n";
        print "<一度目の挨拶>\n";
        print $greeting;
        
        #
        # （あれやこれや処理を書く）
        #
        
        # 最初に定義した$greeting変数を使う
        # $greetingのつもりで$greetingsとタイプミス
        print "<二度目の挨拶>\n";
        print $greetings;
        <<
      【実行例】
        >>
           $> ./perlstudy2_100.pl
　　　<一度目の挨拶>
　　　Hello World
　　　<二度目の挨拶>
        <<
		二度目の挨拶の出力では$greetingのつもりで$greetingsとタイプミスしてしまったので何も出力されませんでした。
		"use strict"を書いておくとこういうトラブルを防ぐことができます。
		"use strict"を書いておくと変数を使う前に"宣言"を行うように強制させられます。
		変数の宣言は以下のように行います。
		>>
          use strict;
          
          # 変数の宣言
          my $greeting;  #挨拶の文章を格納する変数（変数の役割をコメントしておくと後でわかりやすい）]
		<<
		【実行例】
		>>
		$> ./perlstudy2_101.pl
		Global symbol "$greetings" requires explicit package name at ./perlstudy2_100.pl line 19.
        Execution of ./perlstudy2_100.pl aborted due to compilation errors.
		<<
		二番目の挨拶で使用しようとした$greetingsという変数が宣言されておらずエラーになるためタイプミスに気づくことができます。
		
	『use warnings』
      ・エラーメッセージだけでなく警告メッセージも表示してくれる呪文。
      ・エラーメッセージだけだと正直何がまずいのかさっぱりわからないことのほうが多いです。
      ・追加のインストールが必要です。CPANでモジュールをインストールしておきましょう
      【TODO：warningsインストール方法】。
      【TODO：warningsがある場合ない場合の出力例など】
    『use utf8』
      ・strict, warningsほど必須ではありませんが日本語を使う上では重要な呪文です。
      ・指定がない場合、文字列が単なるバイト列として扱われ文字列の検索で不都合が起きる場合があります。
      【TODO：utf8がある場合ない場合の出力例など。正規表現の例？】

    ・使用例
    >>
      #!/usr/bin/perl
      
      use strict;
      use warnings;
      use utf8;
    <<
  1-2.use xxxxxって何？
    ・追加のモジュール（他のPerlソースファイル等）を読み込む時に使うコマンド
    ・Perlによってスクリプトが解析される際の最初に実行される。
    ・上記の呪文の他にも、CPAN（世界中の人が作ったPerlの便利ツールが置いてあるところ）などでダウンロードしたソースファイルをこのコマンドで読み込むことでいろいろなことができるようになります。

2.変数
  2-1.変数（名）とは何か
    ・一般的な概念
      http://e-words.jp/w/E5A489E695B0.html
      >>
      プログラムのソースコード中で、データを一時的に記憶しておくための領域に固有の名前を付けたもの。変数につけた名前を変数名と呼び、記憶されているデータをその変数の値という。データの入れ物のような存在で、プログラム中で複数のデータを扱いたいときや、同じデータを何度も参照したり計算によって変化させたい場合に利用する。
      
      変数をプログラム中で利用するには、自分がこれからどんな変数を利用するかを宣言し、値を代入する必要がある(宣言が不要な言語や処理系もある)。変数に格納された値を利用したいときは、変数名を使って参照する。多くの言語では、整数、実数、文字列など、変数に利用できるデータの種類(データ型)が決まっており、宣言や代入の際にその変数がどのデータ型かを指定する必要がある。
      <<
    ・Perlの変数
      ・変数の宣言は必要ない。使いたい時に使える。※前述のuse strictが有効な場合は除く
      ・データ型を指定する必要はない。Perlが内部で状況に応じて判断してくれます。※重要
      【TODO：実行例など】

  2-2.変数というものがないとどうなるかざっくりと説明
    コンピュータの記憶領域の番地（数字）を指定し値を書き込み、参照するときはその番地を指定して読みだす必要がある。
    コンピュータの構造（プロセッサ）によって記憶領域の番地の付け方が違うので、コンピュータ毎に番地を変えてプログラムを書く必要がある。
    => 面倒、値がどういう種類のものかわかりにくい
    => 番地の代わりになる名前（タグ）をつけたもの

    例）人のいる場所を表すのに緯度経度の代わりに住所で表す
      人：データ、メモリの番地：緯度経度、住所：変数名

  2-2.変数の種類
    
    2-2-1.単純変数（変数）
      ・一つの値を入れるための箱
      ・同じ変数に続いて値を入れる（代入）と前の値は上書きされる
      [書き方]
        $varname
      [例]
        $varname = 1;     #整数'1'を表す
        $varname = 1.56;  #整数'1.56'を表す
        $varname = "abcde";                   #文字列'abcde'を表す
        $varname = 'これは文字列です\n';      #文字列を表す変数（シングルクォーテーションで括る）
        $varname = "これは文字列です\n改行";  #文字列を表す変数（ダブルクォーテーションで括る）
        【TODO:シングルとダブルの違いの説明=>型の説明でやる？】

    2-2-2.単純配列（配列）
      ・複数の値を1つの名称でグループ化して入れるための箱
      ・特定の場所の値を取り出す（参照する）のに整数の値を使う
      ・配列の特定の場所の値を参照するのに使う値を『添字』という。
      ・同じ名称の配列の同じ添字に続いて値を入れると前の値は上書きされる。
      ・配列の添字は0から始まる。
      [書き方]
        @arrname
      [例1：添字で値を代入（配列の初期化）]
        $arrname[0] = 1;
        $arrname[1] = 2;
        $arrname[2] = 3;
      [例2：リストで値を代入（配列の初期化）]
        ※リスト：値のをカンマ区切りの丸括弧『()』でくくったもの。値の集合。
        (1, 2, 3) = @arrname;

    2-2-3.連想配列（ハッシュ）
      ・連想配列の添字（キー）を単純配列のように連続する数値でなく任意の文字列で表したもの
      ・特定の場所の値を取り出すのに値を代入する時に使った文字列を使う。
      [書き方]
        %hashname
      [例1：添字で値を代入（配列の初期化）]
        $hashname{apple} = 'red';
        $hashname{lemon} = 'yellow';
        $hashname{'Apple'} = 'Red';
        $hashname{'Lemon'} = 'Yellow';
        $hashname{"_Apple"} = '_Red';
        $hashname{"_Lemon"} = '_Yellow';
        ※添字をクォーテーションでくくっても結果は一緒
      [例2：リストで値を代入　※その1：単純なリストで初期化]
        %hashname = ('apple','red','lemon','yellow','Apple','Red','Lemon','Yellow','_apple','_red','_lemon','_yellow');
      [例3：リストで値を代入　※その2：添字と値を指定したリストで初期化]
        %hashname = ('apple'=>'red','lemon'=>'yellow','Apple'=>'Red','Lemon'=>'Yellow','_apple'=>'_red','_lemon'=>'_yellow');
        %hashname = (apple=>'red',lemon=>'yellow',Apple=>'Red',Lemon=>'Yellow',_apple=>'_red',_lemon=>'_yellow');
      ※例1の場合は(ダブル|シングル)クォーテーションでくくる必要がありますが、例2,3の場合は不要です。いずれも例1と同じ結果になります。

    2-2-4.変数名（配列名）のお約束
      ・1文字目は必ず英字(a_zA_z)またはアンダースコア(_)で始まる
      ・2文字目以降は英数字(a-zA-z0-9)またはアンダースコア(_)でも可
        例）【OK】$a, $abc, $a01, $a01_23, 【NG】$123
      ・大文字と小文字は区別される
        例）$a, $Aは別の変数として扱われる
      ・変数名の長さの制限はない
        変数の持つ役割に応じて意味のある名前をつけると後で読みやすいプログラムになります。

  2-3.変数の型【TODO】

  2-3.特殊変数（配列）
    ・宣言しなくてもPerlのスクリプトを実行した時に環境に応じた何らかの値が入っている変数。
    ・おおまかに分けて以下の分類

    (1) 正規表現に関連する特殊変数
    (2) ファイルハンドル毎の特殊変数
    (3) グローバルな特殊変数
      【TODO：重要そうなものをピックアップ】
      ※重要
    (4) グローバルな特殊配列
      【TODO：重要そうなものをピックアップ】
      ※重要
    (5) グローバルな特殊ファイルハンドル
      ※特殊変数の中で更にファイルアクセスの際に重要となるもの
  
  2-3.その他【TODO：思いついたものがあればピックアップ】
    2-3-1.その他変数の説明でよく出てくる用語の説明
      『スカラー』
        ・リスト（配列）などではなく数値や文字列など単純な値のこと。
      『リスト』
        ・値（スカラー）の集合。
        ・値をカンマ区切りの丸括弧『()』でくくったもの。
　　  　・変数として名前が付けられていないものを『無名リスト』ともいう。
        ・名前付きリストのことを連想配列（ハッシュ）という。ｓ
      『リテラル（literal）』
        ・literally（文字通り）に由来
        ・変数を介してではなく数値や文字列など値そのものを指す

3.演算子【TODO】
  3-1.演算子の種類
  3-2.演算子の実行順序

4.繰り返し構文【TODO：余裕があれば】
  【TODO：上記変数の所で説明した配列を参照するようなプログラム例の解説を中心に】

5.条件分岐【TODO：余裕があれば】
  【TODO：上記変数の所で説明した配列を参照するようなプログラム例の解説を中心に】
